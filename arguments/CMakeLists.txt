# CMakeFiles.txt for the arguments library
#
# Vladimir S. FONOV - vladimir.fonov@gmail.com

CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

PROJECT(arguments)

SET(ARGUMENTS_PACKAGE_VERSION_MAJOR 1)
SET(ARGUMENTS_PACKAGE_VERSION_MINOR 4)
SET(ARGUMENTS_PACKAGE_VERSION_PATCH 60)

# SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_CURRENT_SOURCE_DIR}/cmake-modules")
# ENABLE_TESTING()
# INCLUDE(CTest)

#ADD_SUBDIRECTORY( doc )

# Packaging defines
IF(NOT MINC_TOOLKIT_BUILD)
 
  SET(CPACK_GENERATOR TGZ)
  SET(CPACK_PACKAGE_VERSION_MAJOR ${ARGUMENTS_PACKAGE_VERSION_MAJOR})
  SET(CPACK_PACKAGE_VERSION_MINOR ${ARGUMENTS_PACKAGE_VERSION_MINOR})
  SET(CPACK_PACKAGE_VERSION_PATCH ${ARGUMENTS_PACKAGE_VERSION_PATCH})
  INCLUDE(CPack)
  
  OPTION(ARGUMENTS_BUILD_SHARED_LIBS "Build shared libraries." OFF)
ENDIF(NOT MINC_TOOLKIT_BUILD)


SET(PACKAGE "arguments")
SET(PACKAGE_BUGREPORT "jharlap@bic.mni.mcgill.ca")

SET(PACKAGE_NAME "arguments")
SET(PACKAGE_VERSION "${ARGUMENTS_PACKAGE_VERSION_MAJOR}.${ARGUMENTS_PACKAGE_VERSION_MINOR}.${ARGUMENTS_PACKAGE_VERSION_PATCH}")
SET(PACKAGE_STRING "${PACKAGE_NAME} ${PACKAGE_VERSION}")

# add for building relocatable library
IF(UNIX)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF(UNIX)

set(CMAKE_MACOSX_RPATH ON)
SET(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX})

# aliases
SET(VERSION "${PACKAGE_VERSION}")

# # config files for build
# CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h @ONLY)

# others
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/epm-header.in ${CMAKE_CURRENT_BINARY_DIR}/epm-header)

INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/Include )

SET(arguments_HEADERS
  src/arguments.h
)

# some variables
SET(arguments_LIB_SRCS
  ${arguments_HEADERS}
  src/arguments.cpp
)

IF(ARGUMENTS_BUILD_SHARED_LIBS)
  SET(LIBRARY_TYPE SHARED)
  SET(LIBRARY_INSTALL LIBRARY)
ELSE(ARGUMENTS_BUILD_SHARED_LIBS)
  SET(LIBRARY_TYPE STATIC)
  SET(LIBRARY_INSTALL ARCHIVE)
ENDIF(ARGUMENTS_BUILD_SHARED_LIBS)


ADD_LIBRARY(arguments ${LIBRARY_TYPE} ${arguments_LIB_SRCS})


INSTALL(FILES ${arguments_HEADERS}
   DESTINATION include)

INSTALL(TARGETS arguments ${LIBRARY_INSTALL} DESTINATION lib${LIB_SUFFIX})

set(ARGUMENTS_USE_FILE_CONFIG      "${CMAKE_CURRENT_BINARY_DIR}/UseARGUMENTS.cmake")
set(ARGUMENTS_INCLUDE_DIRS_CONFIG   ${CMAKE_CURRENT_SOURCE_DIR}/src )
set(ARGUMENTS_LIBRARY_DIRS_CONFIG   ${CMAKE_CURRENT_BINARY_DIR} )
set(ARGUMENTS_LIBRARIES_CONFIG      arguments)

configure_file(ARGUMENTSConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/ARGUMENTSConfig.cmake @ONLY )

configure_file(UseARGUMENTS.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/UseARGUMENTS.cmake @ONLY)

# config for install dir
set(ARGUMENTS_USE_FILE_CONFIG      "${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}/UseARGUMENTS.cmake")
set(ARGUMENTS_INCLUDE_DIRS_CONFIG  ${CMAKE_INSTALL_PREFIX}/include )
set(ARGUMENTS_LIBRARY_DIRS_CONFIG  ${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX} )
set(ARGUMENTS_LIBRARIES_CONFIG     arguments)

configure_file(ARGUMENTSConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ARGUMENTSConfig.cmake @ONLY )

configure_file(UseARGUMENTS.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/UseARGUMENTS.cmake @ONLY)

INSTALL(
  FILES 
   ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/UseARGUMENTS.cmake 
   ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ARGUMENTSConfig.cmake
  DESTINATION lib${LIB_SUFFIX}
  COMPONENT Development)

#TODO
# IF(BUILD_TESTING)
#   ADD_SUBDIRECTORY( Testing )
# ENDIF(BUILD_TESTING)
