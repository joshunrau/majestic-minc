/* ----------------------------------------------------------------------------
@COPYRIGHT  :
              Copyright 1993,1994,1995 David MacDonald,
              McConnell Brain Imaging Centre,
              Montreal Neurological Institute, McGill University.
              Permission to use, copy, modify, and distribute this
              software and its documentation for any purpose and without
              fee is hereby granted, provided that the above copyright
              notice appear in all copies.  The author and McGill University
              make no representations about the suitability of this
              software for any purpose.  It is provided "as is" without
              express or implied warranty.
---------------------------------------------------------------------------- */

#include  <internal_volume_io.h>
#include  <vols.h>

#ifndef lint
static char rcsid[] = "$Header: /private-cvsroot/libraries/bicpl/Volumes/labels.c.save,v 1.1 1999-06-21 21:00:25 stever Exp $";
#endif

/* ----------------------------- MNI Header -----------------------------------
@NAME       : set_label_volume_real_range
@INPUT      : volume
@OUTPUT     : 
@RETURNS    : 
@DESCRIPTION: Sets the real range to be equal to the voxel range.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    :         1993    David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

public  void  set_label_volume_real_range(
    Volume  volume )
{
    if( get_volume_data_type(volume) != FLOAT &&
        get_volume_data_type(volume) != DOUBLE )
    {
        set_volume_real_range( volume,
                               get_volume_voxel_min(volume),
                               get_volume_voxel_max(volume) );
    }
    else
        volume->real_range_set = FALSE;
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : create_label_volume
@INPUT      : volume
              type
@OUTPUT     : 
@RETURNS    : a volume
@DESCRIPTION: Creates a label volume with the same tessellation as the volume.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    :         1993    David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

public  Volume  create_label_volume(
    Volume  volume,
    nc_type type )
{
    Volume   label_volume;

    if( type == NC_UNSPECIFIED )
        type = NC_BYTE;

    label_volume = copy_volume_definition_no_alloc( volume, type, FALSE,
                                                    0.0, -1.0 );

    set_label_volume_real_range( label_volume );

    return( label_volume );
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : check_alloc_label_data
@INPUT      : volume
@OUTPUT     : 
@RETURNS    : 
@DESCRIPTION: Checks if the label data has been allocated.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    :         1993    David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

private  void  check_alloc_label_data(
    Volume  volume )
{
    if( !volume_is_alloced( volume ) && !volume_is_cached(volume) )
    {
        alloc_volume_data( volume );
        set_all_volume_label_data( volume, 0 );
    }
}

public  BOOLEAN  is_label_volume_initialized(
    Volume  volume )
{
    return( volume != NULL && 
            ((volume->is_cached_volume &&
             cached_volume_has_been_modified( &volume->cache )) ||
             (!volume->is_cached_volume &&
              multidim_array_is_alloced( &volume->array ))) );
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : set_all_volume_label_data
@INPUT      : volume
              value
@OUTPUT     : 
@RETURNS    : 
@DESCRIPTION: Sets the label value of all voxels to the value specified.
@CREATED    : Mar   1993           David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

public  void  set_all_volume_label_data(
    Volume    volume,
    int       value )
{
    Data_types      type;
    void            *ptr;
    Real            real_value;
    int             v0, v1, v2, v3, v4;
    unsigned int    n_voxels;

    check_alloc_label_data( volume );

    type = get_volume_data_type( volume );
    if( !volume->is_cached_volume && value == 0 &&
        type != FLOAT && type != DOUBLE )
    {
        GET_VOXEL_PTR( ptr, volume, 0, 0, 0, 0, 0 );
        n_voxels = get_volume_total_n_voxels( volume );
        (void)memset( ptr, 0, (size_t) n_voxels * (size_t) get_type_size(type));
    }
    else
    {
        real_value = (Real) value;
        BEGIN_ALL_VOXELS( volume, v0, v1, v2, v3, v4 )

            set_volume_real_value( volume, v0, v1, v2, v3, v4, real_value );

        END_ALL_VOXELS
    }
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : set_volume_label_data
@INPUT      : volume
              x
              y
              z
              value
@OUTPUT     : 
@RETURNS    : 
@DESCRIPTION: Sets the label data of the given voxel to the value.
@CREATED    : Mar   1993           David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

public  void  set_volume_label_data_5d(
    Volume          volume,
    int             v0,
    int             v1,
    int             v2,
    int             v3,
    int             v4,
    int             value )
{
    check_alloc_label_data( volume );

    set_volume_real_value( volume, v0, v1, v2, v3, v4, (Real) value );
}

public  void  set_volume_label_data(
    Volume          volume,
    int             voxel[],
    int             value )
{
    set_volume_label_data_5d( volume,
                              voxel[0], voxel[1], voxel[2], voxel[3], voxel[4],
                              value );
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : get_volume_label_data
@INPUT      : volume
              x
              y
              z
@OUTPUT     : 
@RETURNS    : value
@DESCRIPTION: Returns the label data of the given voxel.
@CREATED    : Mar   1993           David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

public  int  get_volume_label_data(
    Volume          volume,
    int             voxel[] )
{
    return( get_volume_label_data_5d( volume,
                       voxel[0], voxel[1], voxel[2], voxel[3], voxel[4] ) );
}

public  int  get_volume_label_data_5d(
    Volume          volume,
    int             v0,
    int             v1,
    int             v2,
    int             v3,
    int             v4 )
{
    int    label;

    if( volume == (Volume) NULL || !volume_is_alloced( volume ) )
        return( 0 );
    else
    {
        label = (int) get_volume_real_value( volume, v0, v1, v2, v3, v4 );
        return( label );
    }
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : get_3D_volume_label_data
@INPUT      : volume
              x
              y
              z
@OUTPUT     : 
@RETURNS    : label
@DESCRIPTION: Gets the label value of a 3D label volume.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    :         1993    David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

public  int  get_3D_volume_label_data(
    Volume          volume,
    int             x,
    int             y,
    int             z )
{
    int    label;

    if( volume == (Volume) NULL || !volume_is_alloced( volume ) )
        return( 0 );
    else
    {
        label = (int) get_volume_real_value( volume, x, y, z, 0, 0 );
        return( label );
    }
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : get_voxel_label_bit
@INPUT      : volume
              voxel
              bit
@OUTPUT     : 
@RETURNS    : TRUE or FALSE
@DESCRIPTION: Returns the label bit.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    :         1993    David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

public  BOOLEAN  get_voxel_label_bit(
    Volume          volume,
    int             voxel[],
    int             bit )
{
    return( (get_volume_label_data( volume, voxel ) & bit) == 0 );
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : set_voxel_label_bit
@INPUT      : volume
              voxel
              bit
              value
@OUTPUT     : 
@RETURNS    : 
@DESCRIPTION: Sets the voxel label bit.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    :         1993    David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

public  void  set_voxel_label_bit(
    Volume          volume,
    int             voxel[],
    int             bit,
    BOOLEAN         value )
{
    int     i, n_dims, v[MAX_DIMENSIONS], label, anded, new_label;

    check_alloc_label_data( volume );

    n_dims = get_volume_n_dimensions(volume);

    for_less( i, 0, n_dims )
        v[i] = voxel[i];

    label = (int) get_volume_real_value( volume, v[0], v[1], v[2], v[3], v[4]);

    anded = (label & bit);

    if( value )
    {
        if( anded != bit )
        {
            new_label = label | bit;
            set_volume_real_value( volume, v[0], v[1], v[2], v[3], v[4],
                                    (Real) new_label );
        }
    }
    else if( anded != 0 )
    {
        new_label = label & (~bit);
        set_volume_real_value( volume, v[0], v[1], v[2], v[3], v[4],
                                (Real) new_label );
    }
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : set_all_volume_label_data_bit
@INPUT      : volume
              bit
              value - ON or OFF
@OUTPUT     : 
@RETURNS    : 
@DESCRIPTION: Sets just the given bit of all the voxels' label data to the
              given value.
@CREATED    : Mar   1993           David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

public  void  set_all_volume_label_data_bit(
    Volume         volume,
    int            bit,
    BOOLEAN        value )
{
    int             v[MAX_DIMENSIONS];

    check_alloc_label_data( volume );

    BEGIN_ALL_VOXELS( volume, v[0], v[1], v[2], v[3], v[4] )

        set_voxel_label_bit( volume, v, bit, value );

    END_ALL_VOXELS
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : get_volume_voxel_activity
@INPUT      : volume
              voxel
              activity_if_mixed
@OUTPUT     : 
@RETURNS    : TRUE or FALSE
@DESCRIPTION: Returns the voxel activity, by looking at the 2^d corners of the
              voxel.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    :         1993    David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

public  BOOLEAN  get_volume_voxel_activity(
    Volume     volume,
    Real       voxel[],
    BOOLEAN    activity_if_mixed )
{
    BOOLEAN  active_found, inactive_found;
    int      c, int_index[MAX_DIMENSIONS], ind[MAX_DIMENSIONS];
    int      n[MAX_DIMENSIONS], sizes[MAX_DIMENSIONS];

    if( volume == (Volume) NULL || !volume_is_alloced( volume ) )
        return( TRUE );

    get_volume_sizes( volume, sizes );

    for_less( c, 0, get_volume_n_dimensions(volume) )
        if( voxel[c] < 0.0 || voxel[c] > (Real) sizes[c]-1.0 )
            return( FALSE );

    for_less( c, 0, get_volume_n_dimensions(volume) )
    {
        int_index[c] = (int) voxel[c];
        if( int_index[c] == sizes[c] - 1 )
            int_index[c] = sizes[c] - 2;
        n[c] = 2;
    }

    for_less( c, get_volume_n_dimensions(volume), MAX_DIMENSIONS )
    {
        n[c] = 1;
        int_index[c] = 0;
    }

    active_found = FALSE;
    inactive_found = FALSE;

    for_less( ind[VIO_X], int_index[VIO_X], int_index[VIO_X] + n[VIO_X] )
    for_less( ind[VIO_Y], int_index[VIO_Y], int_index[VIO_Y] + n[VIO_Y] )
    for_less( ind[VIO_Z], int_index[VIO_Z], int_index[VIO_Z] + n[VIO_Z] )
    for_less( ind[3], int_index[3], int_index[3] + n[3] )
    for_less( ind[4], int_index[4], int_index[4] + n[4] )
    {
        if( get_volume_label_data( volume, ind ) == 0 )
        {
            if( inactive_found )
                return( activity_if_mixed );
            active_found = TRUE;
        }
        else
        {
            if( active_found )
                return( activity_if_mixed );
            inactive_found = TRUE;
        }
    }

    if( active_found && !inactive_found )
        return( TRUE );
    else if( !active_found && inactive_found )
        return( FALSE );
    else
        return( activity_if_mixed );
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : get_input_volume_label_limits
@INPUT      : volume1
              volume2
@OUTPUT     : limits
@RETURNS    : 
@DESCRIPTION: Computes the range of overlap of volume2 in volume1.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    : Aug. 1, 1995    David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

private  void  get_input_volume_label_limits(
    Volume   volume1,
    Volume   volume2,
    int      limits[2][MAX_DIMENSIONS] )
{
    int       sizes1[MAX_DIMENSIONS], sizes2[MAX_DIMENSIONS];
    int       d, n_dims, range[MAX_DIMENSIONS], t[MAX_DIMENSIONS];
    Real      voxel1[MAX_DIMENSIONS], voxel2[MAX_DIMENSIONS];
    int       low[MAX_DIMENSIONS], high[MAX_DIMENSIONS];
    Real      xw, yw, zw;
    BOOLEAN   first;

    get_volume_sizes( volume1, sizes1 );
    get_volume_sizes( volume2, sizes2 );

    n_dims = get_volume_n_dimensions(volume1);

    for_less( d, 0, MAX_DIMENSIONS )
    {
        if( d < n_dims )
            range[d] = 2;
        else
            range[d] = 1;
    }

    first = TRUE;

    for_less( t[0], 0, range[0] )
    for_less( t[1], 0, range[1] )
    for_less( t[2], 0, range[2] )
    for_less( t[3], 0, range[3] )
    for_less( t[4], 0, range[4] )
    {
        for_less( d, 0, n_dims )
            voxel2[d] = -0.5 + (Real) t[d] * (Real) sizes2[d];

        convert_voxel_to_world( volume2, voxel2, &xw, &yw, &zw );
        convert_world_to_voxel( volume1, xw, yw, zw, voxel1 );

        for_less( d, 0, n_dims )
        {
            low[d] = VIO_FLOOR( voxel1[d] ) - 1;
            high[d] = VIO_CEILING( voxel1[d] ) + 1;
        }

        if( first )
        {
            first = FALSE;
            for_less( d, 0, n_dims )
            {
                limits[0][d] = low[d];
                limits[1][d] = high[d];
            }
        }
        else
        {
            for_less( d, 0, n_dims )
            {
                if( low[d] < limits[0][d] )
                    limits[0][d] = low[d];
                if( high[d] > limits[1][d] )
                    limits[1][d] = high[d];
            }
        }
    }

    for_less( d, 0, n_dims )
    {
        if( limits[0][d] < 0 )
            limits[0][d] = 0;
        if( limits[1][d] >= sizes1[d] )
            limits[1][d] = sizes1[d] - 1;
    }
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : load_partial_label_volume
@INPUT      : filename
              label_volume
@OUTPUT     :
@RETURNS    : VIO_OK or VIO_ERROR
@DESCRIPTION: Loads a label volume from a file which does not necessarily
              contain the exact topology of the label volume.  Essentially
              it resamples the volume in the file onto the label volume.
@METHOD     :
@GLOBALS    :
@CALLS      :
@CREATED    : Dec.  8, 1995    David MacDonald
@MODIFIED   : Jul. 17, 1996    D. MacDonald   - made faster for linear xforms
---------------------------------------------------------------------------- */

private  Status  load_partial_label_volume(
    STRING   filename,
    Volume   label_volume )
{
    Status                status;
    int                   label_voxel[N_DIMENSIONS], dim;
    int                   int_voxel[N_DIMENSIONS], int_voxel_value;
    int                   limits[2][MAX_DIMENSIONS];
    progress_struct       progress;
    nc_type               type;
    Real                  xw, yw, zw, voxel[N_DIMENSIONS];
    Real                  voxel_value;
    Real                  xyz[N_DIMENSIONS], dx, dy, dz;
    BOOLEAN               signed_flag;
    Volume                file_volume;
    Vector                z_axis;
    General_transform     inverse_file_transform, label_transform;
    Transform             all, reorder1, reorder2;
    BOOLEAN               is_linear;

    check_alloc_label_data( label_volume );

    type = get_volume_nc_data_type( label_volume, &signed_flag );

    status = input_volume( filename, 3, File_order_dimension_names,
                           type, signed_flag, 0.0, 0.0,
                           TRUE, &file_volume, NULL );

    if( status != VIO_OK )
        return( VIO_ERROR );

    get_input_volume_label_limits( label_volume, file_volume,
                                   limits );

    create_inverse_general_transform( get_voxel_to_world_transform(file_volume),
                                      &inverse_file_transform );

    concat_general_transforms( get_voxel_to_world_transform( label_volume ),
                               &inverse_file_transform, &label_transform );

    is_linear = get_transform_type( &label_transform ) == LINEAR;
    if( is_linear )
    {
        voxel[0] = 0.0;
        voxel[1] = 1.0;
        voxel[2] = 2.0;
        reorder_voxel_to_xyz( label_volume, voxel, xyz );
        make_identity_transform( &reorder1 );
        Transform_elem( reorder1, 0, 0 ) = 0.0;
        Transform_elem( reorder1, 1, 1 ) = 0.0;
        Transform_elem( reorder1, 2, 2 ) = 0.0;

        for_less( dim, 0, N_DIMENSIONS )
            Transform_elem( reorder1, VIO_ROUND(xyz[dim]), dim ) = 1.0;

        concat_transforms( &all, &reorder1,
                           get_linear_transform_ptr(&label_transform) );

        xyz[0] = 0.0;
        xyz[1] = 1.0;
        xyz[2] = 2.0;
        reorder_xyz_to_voxel( file_volume, xyz, voxel );
        make_identity_transform( &reorder2 );
        Transform_elem( reorder2, 0, 0 ) = 0.0;
        Transform_elem( reorder2, 1, 1 ) = 0.0;
        Transform_elem( reorder2, 2, 2 ) = 0.0;

        for_less( dim, 0, N_DIMENSIONS )
            Transform_elem( reorder2, VIO_ROUND(voxel[dim]), dim ) = 1.0;

        concat_transforms( &all, &all, &reorder2 );

        get_transform_z_axis( &all, &z_axis );
        dx = RVector_x(z_axis);
        dy = RVector_y(z_axis);
        dz = RVector_z(z_axis);
    }

    initialize_progress_report( &progress, FALSE,
                                (limits[1][VIO_X] - limits[0][VIO_X] + 1) *
                                (limits[1][VIO_Y] - limits[0][VIO_Y] + 1),
                                "Installing Labels" );

    for_inclusive( label_voxel[VIO_X], limits[0][VIO_X], limits[1][VIO_X] )
    {
        for_inclusive( label_voxel[VIO_Y], limits[0][VIO_Y], limits[1][VIO_Y] )
        {
            for_inclusive( label_voxel[VIO_Z], limits[0][VIO_Z], limits[1][VIO_Z] )
            {
                if( !is_linear || label_voxel[VIO_Z] == limits[0][VIO_Z] )
                {
                    convert_3D_voxel_to_world( label_volume,
                                               (Real) label_voxel[VIO_X],
                                               (Real) label_voxel[VIO_Y],
                                               (Real) label_voxel[VIO_Z],
                                               &xw, &yw, &zw );
                    convert_world_to_voxel( file_volume, xw, yw, zw, voxel );
                }
                else
                {
                    voxel[VIO_X] += dx;
                    voxel[VIO_Y] += dy;
                    voxel[VIO_Z] += dz;
                }

                if( voxel_is_within_volume( file_volume, voxel ) )
                {
                    convert_real_to_int_voxel( 3, voxel, int_voxel );
                    voxel_value = get_volume_real_value( file_volume,
                                       int_voxel[0], int_voxel[1],
                                       int_voxel[2], 0, 0 );

                    int_voxel_value = VIO_ROUND( voxel_value );
                    if( int_voxel_value > 0 )
                    {
                        set_volume_label_data( label_volume, label_voxel,
                                               int_voxel_value );
                    }
                }
            }

            update_progress_report( &progress,
                                    (label_voxel[VIO_X] - limits[0][VIO_X]) *
                                    (limits[1][VIO_Y] - limits[0][VIO_Y]) +
                                    label_voxel[VIO_Y] - limits[0][VIO_Y] + 1 );
        }
    }

    terminate_progress_report( &progress );

    delete_general_transform( &inverse_file_transform );
    delete_general_transform( &label_transform );
    delete_volume( file_volume );

    return( status );
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : load_label_volume
@INPUT      : Filename
@OUTPUT     : label_volume
@RETURNS    : VIO_ERROR or VIO_OK
@DESCRIPTION: Loads the label volume.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    :         1993    David MacDonald
@MODIFIED   : Aug. 1, 1995    D. MacDonald  -  loaded volume no longer needs
                                               to be same grid.
---------------------------------------------------------------------------- */

public  Status  load_label_volume(
    STRING   filename,
    Volume   label_volume )
{
    Status                status;
    int                   n_file_dims;
    int                   n_dims;
    STRING                *dim_names;
    nc_type               type;
    BOOLEAN               signed_flag, same_grid;
    Volume                file_volume;

    check_alloc_label_data( label_volume );

    n_dims = get_volume_n_dimensions( label_volume );
    dim_names = get_volume_dimension_names( label_volume );

    status = input_volume_header_only( filename, n_dims, dim_names,
                                       &file_volume, NULL );

    delete_dimension_names( label_volume, dim_names );

    if( status != VIO_OK )
        return( status );

    same_grid = volumes_are_same_grid( label_volume, file_volume );
    n_file_dims = get_volume_n_dimensions(file_volume);

    if( n_file_dims != n_dims )
    {
        print_error( "Label volume n dimensions (%d) does not match\n",
                     n_file_dims );
        print_error( "      volume n dimensions (%d).\n", n_dims );
        return( VIO_ERROR );
    }

    if( same_grid )
    {
        type = get_volume_nc_data_type( label_volume, &signed_flag );

        status = input_volume( filename, 3, XYZ_dimension_names,
                               type, signed_flag, 0.0, 0.0,
                               FALSE, &label_volume, NULL );

        set_label_volume_real_range( label_volume );
    }
    else
    {
        status = load_partial_label_volume( filename, label_volume );
    }

    return( status );
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : save_label_volume
@INPUT      : filename
              original_filename
              label_volume
@OUTPUT     : 
@RETURNS    : VIO_OK or VIO_ERROR
@DESCRIPTION: Saves the label volume.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    :         1993    David MacDonald
@MODIFIED   : Aug. 1, 1995    D. MacDonald    - crops the volume on output
---------------------------------------------------------------------------- */

public  Status  save_label_volume(
    STRING   filename,
    STRING   original_filename,
    Volume   label_volume,
    Real     crop_threshold )
{
    Status   status;
    BOOLEAN  cropping;
    Volume   cropped_volume;
    int      n_voxels, n_voxels_cropped;
    int      c, limits[2][MAX_DIMENSIONS], sizes[MAX_DIMENSIONS];

    check_alloc_label_data( label_volume );

    if( crop_threshold > 0.0 )
    {
        if( find_volume_crop_bounds( label_volume, -1.0, 0.5, limits ) )
        {
            get_volume_sizes( label_volume, sizes );
            n_voxels = 1;
            n_voxels_cropped = 1;
            for_less( c, 0, N_DIMENSIONS )
            {
                n_voxels *= sizes[c];
                n_voxels_cropped *= limits[1][c] - limits[0][c] + 1;
            }

            cropping = ((Real) n_voxels_cropped / (Real) n_voxels <
                        crop_threshold);
        }
        else
        {
            for_less( c, 0, N_DIMENSIONS )
            {
                limits[0][c] = 0;
                limits[1][c] = 0;
            }
            cropping = TRUE;
        }
    }
    else
        cropping = FALSE;

    if( cropping )
        cropped_volume = create_cropped_volume( label_volume, limits );
    else
        cropped_volume = label_volume;

    if( original_filename != NULL )
    {
        status = output_modified_volume( filename,
                                NC_UNSPECIFIED, FALSE, 0.0, 0.0,
                                cropped_volume, original_filename,
                                "Label volume\n", NULL );
    }
    else
    {
        status = output_volume( filename, NC_UNSPECIFIED, FALSE, 0.0, 0.0,
                                cropped_volume, "Label volume\n", NULL );
    }

    if( cropping )
        delete_volume( cropped_volume );

    return( status );
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : input_tags_as_labels
@INPUT      : file
              volume
@OUTPUT     : label_volume
@RETURNS    : VIO_OK or VIO_ERROR
@DESCRIPTION: Inputs a tag file into a label volume.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    : 1993             David MacDonald
@MODIFIED   : 
---------------------------------------------------------------------------- */

public  Status  input_tags_as_labels(
    FILE    *file,
    Volume  volume,
    Volume  label_volume )
{
    Status          status;
    int             c, label, ind[MAX_DIMENSIONS];
    Real            voxel[MAX_DIMENSIONS];
    int             n_volumes;
    Real            tag1[N_DIMENSIONS];
    int             structure_id;
    Real            min_label, max_label;

    check_alloc_label_data( label_volume );

    get_volume_real_range( label_volume, &min_label, &max_label );

    status = initialize_tag_file_input( file, &n_volumes );

    while( status == VIO_OK &&
           input_one_tag( file, n_volumes,
                          tag1, NULL, NULL, &structure_id, NULL, NULL,
                          &status ) )
    {
        convert_world_to_voxel( volume, tag1[VIO_X], tag1[VIO_Y], tag1[VIO_Z], voxel );

        for_less( c, 0, get_volume_n_dimensions(volume) )
        {
            ind[c] = VIO_ROUND( voxel[c] );
        }

        label = structure_id;
        if( (Real) label >= min_label && (Real) label <= max_label &&
            int_voxel_is_within_volume( volume, ind ) )
        {
            set_volume_label_data( label_volume, ind, label);
        }
    }

    return( status );
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : create_label_volume_from_file
@INPUT      : filename
              volume
@OUTPUT     : label_volume
@RETURNS    : VIO_OK or VIO_ERROR
@DESCRIPTION: Creates a label volume for the given volume from a tag file or
              a minc file.
@METHOD     :
@GLOBALS    :
@CALLS      :
@CREATED    : Dec.  8, 1995    David MacDonald
@MODIFIED   :
---------------------------------------------------------------------------- */

public  Status  create_label_volume_from_file(
    STRING   filename,
    Volume   volume,
    Volume   *label_volume )
{
    Status  status;
    STRING  *dim_names;
    Volume  file_volume;
    FILE    *file;
    BOOLEAN same_grid;

    status = VIO_OK;

    if( filename_extension_matches( filename, "mnc" ) )
    {
        dim_names = get_volume_dimension_names( volume );
        status = input_volume_header_only( filename,
                                           get_volume_n_dimensions(volume),
                                           dim_names, &file_volume, NULL );

        if( status != VIO_OK )
        {
            delete_dimension_names( volume, dim_names );
            return( status );
        }

        same_grid = volumes_are_same_grid( volume, file_volume );
        delete_volume( file_volume );

        if( same_grid )
        {
            status = input_volume( filename, get_volume_n_dimensions(volume),
                                   dim_names, NC_UNSPECIFIED, FALSE, 0.0, 0.0,
                                   TRUE, label_volume, NULL );
        }
        else
        {
            *label_volume = create_label_volume( volume, NC_UNSPECIFIED );
            status = load_partial_label_volume( filename, *label_volume );
        }

        delete_dimension_names( volume, dim_names );
    }
    else
    {
        *label_volume = create_label_volume( volume, NC_UNSPECIFIED );

        if( open_file( filename, READ_FILE, ASCII_FORMAT, &file )!=VIO_OK)
            return( VIO_ERROR );

        if( input_tags_as_labels( file, volume, *label_volume ) != VIO_OK )
            return( VIO_ERROR );

        (void) close_file( file );
    }

    return( status );
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : output_labels_as_tags
@INPUT      : file
              volume
              label_volume
              desired_label
              size
              patient_id
@OUTPUT     : 
@RETURNS    : VIO_OK or VIO_ERROR
@DESCRIPTION: Outputs a set of labels as tags.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    :         1993    David MacDonald
@MODIFIED   : Oct. 19, 1995   D. MacDonald - now writes tags 1 at a time to
                                             be more memory efficient.
---------------------------------------------------------------------------- */

public  Status  output_labels_as_tags(
    FILE    *file,
    Volume  volume,
    Volume  label_volume,
    int     desired_label,
    Real    size,
    int     patient_id )
{
    int             ind[N_DIMENSIONS];
    int             label, sizes[MAX_DIMENSIONS];
    Real            real_ind[N_DIMENSIONS];
    Real            tags[N_DIMENSIONS];
    int             n_tags;

    if( get_volume_n_dimensions(volume) != 3 )
    {
        print_error( "output_labels_as_tags:  volume must be 3D\n" );
        return( VIO_ERROR );
    }

    check_alloc_label_data( label_volume );
    get_volume_sizes( label_volume, sizes );

    n_tags = 0;

    for_less( ind[VIO_X], 0, sizes[VIO_X] )
    {
        real_ind[VIO_X] = (Real) ind[VIO_X];
        for_less( ind[VIO_Y], 0, sizes[VIO_Y] )
        {
            real_ind[VIO_Y] = (Real) ind[VIO_Y];
            for_less( ind[VIO_Z], 0, sizes[VIO_Z] )
            {
                real_ind[VIO_Z] = (Real) ind[VIO_Z];
                label = get_volume_label_data( label_volume, ind );

                if( label == desired_label || (desired_label < 0 && label > 0) )
                {
                    convert_voxel_to_world( volume, real_ind,
                                            &tags[VIO_X], &tags[VIO_Y], &tags[VIO_Z] );

                    if( n_tags == 0 &&
                        initialize_tag_file_output( file, NULL, 1 ) != VIO_OK )
                        return( VIO_ERROR );

                    if( output_one_tag( file, 1, tags, NULL,
                               &size, &label, &patient_id, NULL ) != VIO_OK )
                        return( VIO_ERROR );

                    ++n_tags;
                }
            }
        }
    }

    if( n_tags > 0 )
        terminate_tag_file_output( file );

    return( VIO_OK );
}

/* ----------------------------- MNI Header -----------------------------------
@NAME       : input_landmarks_as_labels
@INPUT      : file
              volume
@OUTPUT     : label_volume
@RETURNS    : VIO_OK or VIO_ERROR
@DESCRIPTION: Loads a set of landmarks into the label_volume.
@METHOD     : 
@GLOBALS    : 
@CALLS      : 
@CREATED    :         1993    David MacDonald
@MODIFIED   : Oct. 19, 1995   D. MacDonald - now reads tags 1 at a time to
                                             be more memory efficient.
---------------------------------------------------------------------------- */

public  Status  input_landmarks_as_labels(
    FILE    *file,
    Volume  volume,
    Volume  label_volume )
{
    int             c, label, ind[MAX_DIMENSIONS];
    Real            voxel[MAX_DIMENSIONS];
    marker_struct   marker;
    Real            min_label, max_label;

    check_alloc_label_data( label_volume );

    get_volume_real_range( label_volume, &min_label, &max_label );

    while( io_tag_point( file, READ_FILE, volume, 1.0, &marker ) == VIO_OK )
    {
        convert_world_to_voxel( volume,
                                (Real) Point_x(marker.position),
                                (Real) Point_y(marker.position),
                                (Real) Point_z(marker.position), voxel );

        for_less( c, 0, get_volume_n_dimensions(volume) )
            ind[c] = VIO_ROUND( voxel[c] );

        label = marker.structure_id;
        if( (Real) label >= min_label && (Real) label <= max_label &&
            int_voxel_is_within_volume( volume, ind ) )
        {
            set_volume_label_data( label_volume, ind, label );
        }
    }

    return( VIO_OK );
}
